//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class GetEntitiesStatesRequest : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/GetEntitiesStates";
        public override string RosMessageName => k_RosMessageName;

        //  Get objects in the scene which can be interacted, e.g. with using SetEntityState.
        //  Use GetEntities service instead if EntityState information for all entities is not needed.
        //  Support for this interface is indicated through the ENTITY_STATE_GETTING value in GetSimulationFeatures.
        public EntityFiltersMsg filters;
        //  Optional filters for the query, including name, category, tags,
        //  and overlap filters.

        public GetEntitiesStatesRequest()
        {
            this.filters = new EntityFiltersMsg();
        }

        public GetEntitiesStatesRequest(EntityFiltersMsg filters)
        {
            this.filters = filters;
        }

        public static GetEntitiesStatesRequest Deserialize(MessageDeserializer deserializer) => new GetEntitiesStatesRequest(deserializer);

        private GetEntitiesStatesRequest(MessageDeserializer deserializer)
        {
            this.filters = EntityFiltersMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.filters);
        }

        public override string ToString()
        {
            return "GetEntitiesStatesRequest: " +
            "\nfilters: " + filters.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
