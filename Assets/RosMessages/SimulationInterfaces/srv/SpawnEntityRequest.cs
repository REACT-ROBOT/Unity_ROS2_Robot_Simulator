//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class SpawnEntityRequest : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/SpawnEntity";
        public override string RosMessageName => k_RosMessageName;

        //  Spawn an entity (a robot, other object) by name or URI
        //  Support for this interface is indicated through the SPAWNING value in GetSimulationFeatures.
        public string name;
        //  A name to give to the spawned entity.
        //  If empty, a name field in the uri file or resource_string will be used,
        //  if supported and not empty (e.g. "name" field in SDFormat, URDF).
        //  If the name is still empty or not unique (as determined by the simulator),
        //  the service returns a generated name in the entity_name response field if the
        //  allow_renaming field is set to true. Otherwise, the service call fails and an
        //  error is returned.
        public bool allow_renaming;
        //  Determines whether the spawning succeeds with a non-unique name.
        //  If it is set to true, the user should always check entity_name response field
        //  and use it for any further interactions.
        public string uri;
        //  Resource such as SDFormat, URDF, USD or MJCF file, a native prefab, etc.
        //  Valid URIs can be determined by calling GetSpawnables first, and you can check
        //  the simulator format support by reading SimulatorFeatures spawn_formats field.
        //  If uri field is empty, resource_string must not be empty.
        public string resource_string;
        //  An entity definition file passed as a string.
        //  Simulators may support spawning from a file generated on the fly (e.g. XACRO).
        //  It is supported by your simulator if GetSimulatorFeatures includes
        //  SPAWNING_RESOURCE_STRING feature.
        //  If uri field is not empty, resource_string field will be ignored.
        public string entity_namespace;
        //  Spawn the entity with all its interfaces under this namespace.
        public Geometry.PoseStampedMsg initial_pose;
        //  Initial entity pose.
        //  The header contains a reference frame, which defaults to global "world" frame.
        //  This frame must be known to the simulator, e.g. of an object spawned earlier.
        //  The timestamp field in the header is ignored.

        public SpawnEntityRequest()
        {
            this.name = "";
            this.allow_renaming = false;
            this.uri = "";
            this.resource_string = "";
            this.entity_namespace = "";
            this.initial_pose = new Geometry.PoseStampedMsg();
        }

        public SpawnEntityRequest(string name, bool allow_renaming, string uri, string resource_string, string entity_namespace, Geometry.PoseStampedMsg initial_pose)
        {
            this.name = name;
            this.allow_renaming = allow_renaming;
            this.uri = uri;
            this.resource_string = resource_string;
            this.entity_namespace = entity_namespace;
            this.initial_pose = initial_pose;
        }

        public static SpawnEntityRequest Deserialize(MessageDeserializer deserializer) => new SpawnEntityRequest(deserializer);

        private SpawnEntityRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.allow_renaming);
            deserializer.Read(out this.uri);
            deserializer.Read(out this.resource_string);
            deserializer.Read(out this.entity_namespace);
            this.initial_pose = Geometry.PoseStampedMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.allow_renaming);
            serializer.Write(this.uri);
            serializer.Write(this.resource_string);
            serializer.Write(this.entity_namespace);
            serializer.Write(this.initial_pose);
        }

        public override string ToString()
        {
            return "SpawnEntityRequest: " +
            "\nname: " + name.ToString() +
            "\nallow_renaming: " + allow_renaming.ToString() +
            "\nuri: " + uri.ToString() +
            "\nresource_string: " + resource_string.ToString() +
            "\nentity_namespace: " + entity_namespace.ToString() +
            "\ninitial_pose: " + initial_pose.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
