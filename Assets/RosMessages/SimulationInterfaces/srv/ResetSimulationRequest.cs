//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class ResetSimulationRequest : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/ResetSimulation";
        public override string RosMessageName => k_RosMessageName;

        //  Reset the simulation to the start, including the entire scene and the simulation time.
        //  Objects that were dynamically spawned are de-spawned.
        //  Support for this interface is indicated through the SIMULATION_RESET value in GetSimulationFeatures,
        //  and supported scopes are further detailed by SIMULATION_RESET_TIME, SIMULATION_RESET_STATE, and SIMULATION_RESET_SPAWNED.
        public const byte SCOPE_DEFAULT = 0; //  same as SCOPE_ALL.
        public const byte SCOPE_TIME = 1; //  Reset simulation time to start.
        public const byte SCOPE_STATE = 2; //  Reset state such as poses and velocities. This may include state randomization
        //  if such feature is available and turned on.
        public const byte SCOPE_SPAWNED = 4; //  De-spawns all spawned entities.
        public const byte SCOPE_ALL = 255; //  Fully resets simulation to the start, as if it was closed and launched again.
        public byte scope;
        //  Scope of the reset. Note that simulators might only support some scopes.
        //  This is a bit field which may be checked for each scope e.g. scope & SCOPE_TIME.

        public ResetSimulationRequest()
        {
            this.scope = 0;
        }

        public ResetSimulationRequest(byte scope)
        {
            this.scope = scope;
        }

        public static ResetSimulationRequest Deserialize(MessageDeserializer deserializer) => new ResetSimulationRequest(deserializer);

        private ResetSimulationRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.scope);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.scope);
        }

        public override string ToString()
        {
            return "ResetSimulationRequest: " +
            "\nscope: " + scope.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
