//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class BoundsMsg : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/Bounds";
        public override string RosMessageName => k_RosMessageName;

        //  Bounds which are useful in several contexts, e.g. to avoid spawning with other object overlap,
        //  or parking in a spot that is too small.
        //  Certain goals or points might be valid for a small object, but not suitable for a large one,
        //  or a differently shaped one.
        //  Bounds can be also checked to ensure certain scenario conditions are met.
        //  For entities, these limits are relative to entity's canonical link transform, following ROS rep-103 convention.
        //  As bounds are optional in most interfaces, TYPE_EMPTY signifies empty bounds, to be understood as "unbounded".
        //  Otherwise, the fields are expected to define a valid volume.
        //  For spawning with a named pose, you should check whether the entity simulation model fits within the bounds
        //  before calling SpawnEntity, to avoid overlaps and unstable behavior.
        //  bounds type
        public const byte TYPE_EMPTY = 0; //  No bounds. The points vector will be empty.
        public const byte TYPE_BOX = 1; //  Axis-aligned bounding box, points field should have two values,
        //  which are upper right and lower left corners of the box.
        public const byte TYPE_CONVEX_HULL = 2; //  Points define a convex hull (at least 3 non-collinear points).
        public const byte TYPE_SPHERE = 3; //  A sphere with center and radius. First element of points vector is the center.
        //  The x field of the second point of the vector is the radius (y and z are ignored).
        public byte type;
        public Geometry.Vector3Msg[] points;
        //  Points defining the bounded area. Check type field to determine semantics.
        //  Valid sizes are zero (no bounds), 2 (sphere or box, depending on type field),
        //  and 3 or more (convex hull).

        public BoundsMsg()
        {
            this.type = 0;
            this.points = new Geometry.Vector3Msg[0];
        }

        public BoundsMsg(byte type, Geometry.Vector3Msg[] points)
        {
            this.type = type;
            this.points = points;
        }

        public static BoundsMsg Deserialize(MessageDeserializer deserializer) => new BoundsMsg(deserializer);

        private BoundsMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.type);
            deserializer.Read(out this.points, Geometry.Vector3Msg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.type);
            serializer.WriteLength(this.points);
            serializer.Write(this.points);
        }

        public override string ToString()
        {
            return "BoundsMsg: " +
            "\ntype: " + type.ToString() +
            "\npoints: " + System.String.Join(", ", points.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
