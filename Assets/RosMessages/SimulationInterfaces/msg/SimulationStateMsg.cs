//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class SimulationStateMsg : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/SimulationState";
        public override string RosMessageName => k_RosMessageName;

        //  Simulation states used in SetSimulationState and returned in GetSimulationState
        public const byte STATE_STOPPED = 0; //  Simulation is stopped, which is equivalent to pausing and resetting with ALL.
        //  This is typically the default state when simulator is launched.
        //  Stopped simulation can be played. It can also be paused, which means
        //  starting simulation in a paused state immediately,
        //  without any time steps for physics or simulated clock ticks.
        public const byte STATE_PLAYING = 1; //  Simulation is playing, can be either paused or stopped.
        public const byte STATE_PAUSED = 2; //  Simulation is paused, can be either stopped (which will reset it) or played.
        public const byte STATE_QUITTING = 3; //  Closing the simulator application. Switching from STATE_PLAYING or STATE_PAUSED
        //  states is expected to stop the simulation first, and then exit.
        //  Simulation interfaces will become unavailable after quitting.
        //  Running simulation application is outside of the simulation interfaces as
        //  there is no service to handle the call when the simulator is not up.
        public byte state;

        public SimulationStateMsg()
        {
            this.state = 0;
        }

        public SimulationStateMsg(byte state)
        {
            this.state = state;
        }

        public static SimulationStateMsg Deserialize(MessageDeserializer deserializer) => new SimulationStateMsg(deserializer);

        private SimulationStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.state);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.state);
        }

        public override string ToString()
        {
            return "SimulationStateMsg: " +
            "\nstate: " + state.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
