//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class SimulatorFeaturesMsg : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/SimulatorFeatures";
        public override string RosMessageName => k_RosMessageName;

        //  Features supported by the simulator.
        public const byte SPAWNING = 0; //  Supports spawn interface (SpawnEntity).
        public const byte DELETING = 1; //  Supports deleting entities (DeleteEntity).
        public const byte NAMED_POSES = 2; //  Supports predefined named poses (GetNamedPoses).
        public const byte POSE_BOUNDS = 3; //  Supports pose bounds (GetNamedPoseBounds).
        public const byte ENTITY_TAGS = 4; //  Supports entity tags in interfaces using EntityFilters, such as GetEntities.
        public const byte ENTITY_BOUNDS = 5; //  Supports entity bounds (GetEntityBounds).
        public const byte ENTITY_BOUNDS_BOX = 6; //  Supports entity filtering with bounds with TYPE_BOX.
        public const byte ENTITY_BOUNDS_CONVEX = 7; //  Supports entity filtering with Bounds TYPE_CONVEX_HULL.
        public const byte ENTITY_CATEGORIES = 8; //  Supports entity categories, such as in use with EntityFilters or SetEntityInfo.
        public const byte SPAWNING_RESOURCE_STRING = 9; //  Supports SpawnEntity resource_string field.
        public const byte ENTITY_STATE_GETTING = 10; //  Supports GetEntityState interface.
        public const byte ENTITY_STATE_SETTING = 11; //  Supports SetEntityState interface.
        public const byte ENTITY_INFO_GETTING = 12; //  Supports GetEntityInfo interface.
        public const byte ENTITY_INFO_SETTING = 13; //  Supports SetEntityInfo interface.
        public const byte SPAWNABLES = 14; //  Supports GetSpawnables interface.
        public const byte SIMULATION_RESET = 20; //  Supports one or more ways to reset the simulation through ResetSimulation.
        public const byte SIMULATION_RESET_TIME = 21; //  Supports SCOPE_TIME flag for resetting.
        public const byte SIMULATION_RESET_STATE = 22; //  Supports SCOPE_STATE flag for resetting.
        public const byte SIMULATION_RESET_SPAWNED = 23; //  Supports SCOPE_SPAWNED flag for resetting.
        public const byte SIMULATION_STATE_GETTING = 24; //  Supports GetSimulationState interface.
        public const byte SIMULATION_STATE_SETTING = 25; //  Supports SetSimulationState interface. Check SIMULATION_STATE_PAUSE feature
        //  for setting STATE_PAUSED.
        public const byte SIMULATION_STATE_PAUSE = 26; //  Supports the STATE_PAUSED SimulationState in SetSimulationState interface.
        public const byte STEP_SIMULATION_SINGLE = 31; //  Supports single stepping through simulation with StepSimulation interface.
        public const byte STEP_SIMULATION_MULTIPLE = 32; //  Supports multi-stepping through simulation, either through StepSimulation.
        //  service or through SimulateSteps action.
        public const byte STEP_SIMULATION_ACTION = 33; //  Supports SimulateSteps action interface.
        public ushort[] features;
        //  A list of simulation features as specified by the list above.
        //  A list of additional supported formats for spawning, which might be empty. Values may include
        //   * sdf (SDFormat)
        //   * urdf (Unified Robot Description Format)
        //   * usd (Universal Scene Description)
        //   * mjcf (MuJoCo's XML format)
        //  or whatever simulator-native formats that are supported. 
        public string[] spawn_formats;
        public string custom_info;
        //  Optional: extra information for the caller, which could point to
        //  documentation, version compatibility and other useful meta information.

        public SimulatorFeaturesMsg()
        {
            this.features = new ushort[0];
            this.spawn_formats = new string[0];
            this.custom_info = "";
        }

        public SimulatorFeaturesMsg(ushort[] features, string[] spawn_formats, string custom_info)
        {
            this.features = features;
            this.spawn_formats = spawn_formats;
            this.custom_info = custom_info;
        }

        public static SimulatorFeaturesMsg Deserialize(MessageDeserializer deserializer) => new SimulatorFeaturesMsg(deserializer);

        private SimulatorFeaturesMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.features, sizeof(ushort), deserializer.ReadLength());
            deserializer.Read(out this.spawn_formats, deserializer.ReadLength());
            deserializer.Read(out this.custom_info);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.features);
            serializer.Write(this.features);
            serializer.WriteLength(this.spawn_formats);
            serializer.Write(this.spawn_formats);
            serializer.Write(this.custom_info);
        }

        public override string ToString()
        {
            return "SimulatorFeaturesMsg: " +
            "\nfeatures: " + System.String.Join(", ", features.ToList()) +
            "\nspawn_formats: " + System.String.Join(", ", spawn_formats.ToList()) +
            "\ncustom_info: " + custom_info.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
