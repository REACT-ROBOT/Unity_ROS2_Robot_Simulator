//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SimulationInterfaces
{
    [Serializable]
    public class EntityFiltersMsg : Message
    {
        public const string k_RosMessageName = "simulation_interfaces/EntityFilters";
        public override string RosMessageName => k_RosMessageName;

        //  A set of filters to apply to entity queries. See GetEntities, GetEntitiesStates.
        public string filter;
        //  Optional, defaults to empty. Return entities with matching names.
        //  Entity names are matched with the filter regular expression.
        //  An empty filter will result in all entities being returned.
        //  The regular expression syntax is POSIX Extended,
        //  see https://pubs.opengroup.org/onlinepubs/9799919799/ definitions.
        //  Applies together with other filters (categories, tags).
        public EntityCategoryMsg[] categories;
        //  Optional, defaults to empty, which means no category filter.
        //  Entities matching any of the categories will be returned.
        //  To get entity category, use GetEntityInfo.
        //  Applies together with other filters (filter, tags).
        //  Check ENTITY_CATEGORIES in GetSimulatorFeatures to determine if
        //  your simulator supports entity categories.
        public TagsFilterMsg tags;
        //  Tags filter to apply. To get entity tags, use GetEntityInfo.
        //  Applies together with other filters (filter, categories).
        //  Check support for this feature (ENTITY_TAGS) in GetSimulationFeatures.
        public BoundsMsg bounds;
        //  if bounds are not empty, the overlap filter is applied
        //  and entities overlapping with bounds will be returned.
        //  Note that not all bound types might be supported by the simulator,
        //  though at least TYPE_SPHERE needs to be supported.
        //  Check ENTITY_BOUNDS_BOX and ENTITY_BOUNDS_CONVEX in GetSimulationFeatures
        //  to determine whether your simulator supports other bound types.
        //  If service is called with filter bounds set to an unsupported type,
        //  a FEATURE_UNSUPPORTED result will be returned.

        public EntityFiltersMsg()
        {
            this.filter = "";
            this.categories = new EntityCategoryMsg[0];
            this.tags = new TagsFilterMsg();
            this.bounds = new BoundsMsg();
        }

        public EntityFiltersMsg(string filter, EntityCategoryMsg[] categories, TagsFilterMsg tags, BoundsMsg bounds)
        {
            this.filter = filter;
            this.categories = categories;
            this.tags = tags;
            this.bounds = bounds;
        }

        public static EntityFiltersMsg Deserialize(MessageDeserializer deserializer) => new EntityFiltersMsg(deserializer);

        private EntityFiltersMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.filter);
            deserializer.Read(out this.categories, EntityCategoryMsg.Deserialize, deserializer.ReadLength());
            this.tags = TagsFilterMsg.Deserialize(deserializer);
            this.bounds = BoundsMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.filter);
            serializer.WriteLength(this.categories);
            serializer.Write(this.categories);
            serializer.Write(this.tags);
            serializer.Write(this.bounds);
        }

        public override string ToString()
        {
            return "EntityFiltersMsg: " +
            "\nfilter: " + filter.ToString() +
            "\ncategories: " + System.String.Join(", ", categories.ToList()) +
            "\ntags: " + tags.ToString() +
            "\nbounds: " + bounds.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
